{"version":3,"sources":["_helper.js","data/getTeams.js","data/getPlayerInfo.js","data/getPlayer.js","data/getRoster.js","data/sortList.js","data/getPlayerStats.js","data/getPlayerDetail.js","components/Team.js","components/DefaultContainer.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["helpers","sortName","array","sort","a","b","x","name","toUpperCase","y","rosterSortPos","this","rosterSortNumber","goalie","filter","player","position","type","defenseman","forward","rosterSortFullName","person","fullName","parseInt","jerseyNumber","cleanName","rawName","toLowerCase","replace","split","join","GetTeams","props","state","teams","fetch","then","response","json","data","setState","className","ref","helper","map","team","id","temaId","key","data-id","onClick","updateTeamID","bind","src","alt","React","Component","Captain","getCaptainData","playerId","undefined","API","people","captain","alternateCaptain","rookie","Player","updatePlayerID","event","sortType","teamSort","playerData","data-key","selectPlayer","GetRoster","getTeamRoster","TEAM_ID","teamValueList","require","find","item","teamName","teamValues","i","element","roster","elmentPlayer","match","value","trim","length","prevTeamId","teamId","prevProps","img","href","officialSiteUrl","Players","players","sortOrdered","sortOrder","SortList","sortContainer","menuArray","menuItems","index","el","push","updateSortType","data-name","PlayerStats","playerStats","getPlayerStats","stats","createTabel","tableRows","splits","league","season","stat","games","goals","assists","points","title","displayName","includes","PlayerDetail","Team","document","body","classList","add","remove","updateSortOrder","console","log","DefaultContainer","selectTeam","ID","MainPage","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba04df83.chunk.js","sourcesContent":["\nconst helpers = {\n    sortName(array) { \n        array.sort(function(a, b) {\n            const x = a.name.toUpperCase();\n            const y = b.name.toUpperCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n\n        return array\n    },\n    rosterSortPos(array) {\n        //sub sort by number first\n        this.rosterSortNumber(array);\n        let goalie = array.filter(player => player.position.type === \"Goalie\");\n        let defenseman = array.filter(player => player.position.type === \"Defenseman\");\n        let forward = array.filter(player => player.position.type === \"Forward\");\n        let sortedArray = [...goalie, ...defenseman, ...forward];\n        return sortedArray;\n    },\n    rosterSortFullName(array) {\n        array.sort(function(a, b) {\n            const x = a.person.fullName.toUpperCase();\n            const y = b.person.fullName.toUpperCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n\n        return array\n    },\n    rosterSortNumber(array) {\n        array.sort(function(a, b) {\n            const x = parseInt(a.jerseyNumber.toUpperCase());\n            const y = parseInt(b.jerseyNumber.toUpperCase());\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n\n        return array\n    },\n    cleanName(rawName) {\n        var trimName = rawName.toLowerCase().replace(' ', '').replace('á', 'a').replace('å', 'a').replace('ä', 'a').replace('ö', 'o').replace('.', '').replace('é', 'e').split(' ').join('').split('.').join('');\n        return trimName;\n    }\n\n}\n\nexport default helpers","\nimport React from 'react';\n\nimport './teamList.scss';\nimport helper from '../_helper'\n\nconst API = 'https://statsapi.web.nhl.com/api/v1/teams';\n\nexport class GetTeams extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            teams: [],\n        };\n    }\n\n    componentDidMount() {\n        fetch(API)\n        .then(response => response.json())\n        .then(data => {\n            this.setState({ teams: data.teams })\n        });\n    }\n\n    render() {\n        const { teams } = this.state;\n\n        return (\n        <section>\n            <nav className=\"team-list\" ref=\"teamList\">\n                {helper.sortName(teams).map(team =>\n                    <button\n                        className={team.id === this.props.temaId ? '-active' : ''}\n                        key={team.id} \n                        data-id={team.id} \n                        onClick={this.props.updateTeamID.bind(null, team.id)}>\n                    <img src={`https://www-league.nhlstatic.com/images/logos/teams-current-primary-light/${team.id}.svg`} alt={team.name}/>\n                    </button>\n                )}\n            </nav>\n        </section>\n        );\n    }\n}\n","\nimport React from 'react';\n\nexport class Captain extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            player: {}\n        };\n    }\n\n\n    componentDidMount() {\n        this.getCaptainData();\n    }\n\n    getCaptainData() {\n        if(this.props.playerId !== null && this.props.playerId !== undefined){\n            const API = `https://statsapi.web.nhl.com/api/v1/people/${this.props.playerId}/`;\n            fetch(API)\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({player: data.people[0]})\n                });\n        }\n    }\n\n    render() {\n\n        return(\n            <span className=\"player-info\">\n                {this.state.player.captain === true ? <span className=\"cap\">C</span> : ''}\n                {this.state.player.alternateCaptain === true ? <span className=\"cap\">A</span> : ''}\n                {this.state.player.rookie === true ? <span className=\"rookie\">Rookie</span> : ''}\n            </span>\n\n        );\n\n    }\n}\n","\nimport React from 'react';\nimport './roster.scss';\n\nimport { Captain } from './getPlayerInfo';\n\nexport class Player extends React.Component {\n\n    updatePlayerID = (event, sortType) =>{\n        this.setState({\n            teamSort: sortType\n        });\n    }\n    render() {\n       const { playerData } = this.props;\n\n        return (\n            <div className=\"player\" key={playerData.person.id} data-key={playerData.person.id}  >\n                <button className=\"link\" onClick={this.props.selectPlayer.bind(null, playerData)}>\n                    <img src={`https://nhl.bamcontent.com/images/headshots/current/168x168/${playerData.person.id}.jpg`} alt={playerData.person.fullName} />\n                </button>\n                <div className=\"info\">\n                    <span className=\"no\">{playerData.jerseyNumber}</span>\n                    <span className=\"name\">{playerData.person.fullName}</span>\n                    <span className=\"pos\">{playerData.position.type}</span>\n                    <Captain playerId={playerData.person.id} />\n                </div>\n            </div>\n        );\n    }\n}","\nimport React from 'react';\nimport './roster.scss';\n\nimport { Player } from './getPlayer';\nimport helper from '../_helper';\n\nexport class GetRoster extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            team: [],\n            playerId: {},\n            prevTeamId: null,\n            teamValues: null\n        };\n    }\n\n    getTeamRoster = TEAM_ID => {\n        if(TEAM_ID !== null && TEAM_ID !== undefined){\n            const API = `https://statsapi.web.nhl.com/api/v1/teams/${TEAM_ID}?expand=team.roster`;\n            fetch(API)\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({team: data.teams[0]})\n\n                    const playerValue = require('./playerValue.json');\n                    const teamValueList = playerValue.find( item => helper.cleanName(item.teamName) === helper.cleanName(data.teams[0].name));\n                    this.setState({teamValues: teamValueList});\n                    const compareArray = [teamValueList.player, data.teams[0]];\n                    return compareArray;\n\n                }).then((item) =>{\n\n                    for (let i = 0; i < item[1].roster.roster.length; i++) {\n                        const element = item[1].roster.roster[i];\n                        const elmentPlayer = helper.cleanName(element.person.fullName);\n                        const match = item[0].find(item => helper.cleanName(item.name) === elmentPlayer);\n                        \n                        if (match) {\n                            element.value = match.value.replace(',','.').replace('MSEK','').trim();\n                        } else{\n                            element.value = null;\n                        }\n                    }\n                    this.setState({team: item[1]})\n                });\n        }\n    };\n\n    componentDidMount() {\n        this.getTeamRoster(this.props.teamId);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.teamId !== prevProps.teamId) {\n            this.getTeamRoster(this.props.teamId);\n        }\n    }\n    \n\n    render() {\n        const { team } = this.state;\n\n        var img = team.id !== undefined ? <img src={`https://www-league.nhlstatic.com/images/logos/teams-current-primary-light/${team.id}.svg`} alt={team.name}/>: '';\n        return (\n            <section className=\"team\">\n                <div className=\"info\">\n                    <div className=\"header\">\n                        {img}\n                        <h1>{team.name}</h1>\n                    </div>\n                    <a href={team.officialSiteUrl}>{team.officialSiteUrl}</a>\n                </div>\n                <Players team={team} teamSort={this.props.teamSort} selectPlayer={this.props.selectPlayer}/>\n                \n            </section>\n        );\n    }\n}\n\nclass Players extends React.Component {\n\n    render() {\n        const { team, teamSort } = this.props;\n        var roster = [];\n        if (team.roster !== null && team.roster !== undefined) {\n            roster = sortOrder(team.roster.roster, teamSort);\n        }\n\n        return (\n            <div className=\"grid roster-list\">\n                {roster.map(player =>\n                    <Player playerData={player} key={'playerID_' + player.person.id} selectPlayer={this.props.selectPlayer} />\n                )}\n            </div>\n        );\n    }\n}\n\nfunction sortOrder(players, sortType) {\n\n    let sortOrdered = null;\n    switch (sortType) {\n        case 'Position':\n            sortOrdered = helper.rosterSortPos(players);\n            break;\n    \n        case 'Name':\n            sortOrdered = helper.rosterSortFullName(players);\n            break;\n    \n        case 'Number':\n            sortOrdered = helper.rosterSortNumber(players);\n            break;\n    \n        default:\n            sortOrdered = helper.rosterSortPos(players);\n            break;\n        }\n\n    return sortOrdered;\n}\n\n\n","\nimport React from 'react';\nimport './sortList.scss';\n\nexport class SortList extends React.Component {\n\n    render() {\n\n        let sortContainer = null;\n        if(this.props.teamId) {\n            var menuArray = ['Name', 'Number', 'Position']\n            var menuItems = [];\n            var sortOrder = this.props.teamSort !== null ? this.props.teamSort: 'Position';\n\n            for (let index = 0; index < menuArray.length; index++) {\n                const el = menuArray[index];\n                menuItems.push(\n                    <button \n                        className={el === sortOrder ? '-active' : null}\n                        type=\"button\" \n                        key={el} \n                        onClick={this.props.updateSortType.bind(null, el)} \n                        data-name={el}>\n                        {el}\n                    </button>\n                )\n            }\n\n            sortContainer = \n                <section className=\"sort-list\">\n                    <nav>\n                        {menuItems}\n                    </nav>\n                </section>;\n        }\n\n        return sortContainer;\n\n    }\n}\n","import React from 'react';\nimport './playerStats.scss'\n\nexport class PlayerStats extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerStats: {}\n        };\n    }\n\n    componentDidMount() {\n        this.getPlayerStats();\n    }\n\n    getPlayerStats() {\n        const { playerData } = this.props\n        const playerId = playerData.person.id\n        if(playerId!== null && playerId !== undefined){\n            const API = `https://statsapi.web.nhl.com/api/v1/people/${playerId}?expand=person.stats&stats=yearByYear,yearByYearPlayoffs,careerRegularSeason&expand=stats.team&site=en_nhlNR`;\n            fetch(API)\n                .then(response => response.json())\n                .then(data => {\n                    const stats = data.people[0].stats;\n                    this.setState({playerStats: stats})\n                });\n        }\n    }\n\n    render() {\n        const { playerStats } = this.state;\n        let stats = [];\n        if(playerStats[0] !== undefined && playerStats[0] !== null) {\n            stats.push(createTabel(playerStats[0]));\n            stats.push(createTabel(playerStats[1]));\n        }\n        return (\n            <div className=\"stats\">\n                {stats}\n            </div>\n        );\n    }\n}\n\nfunction createTabel(data) {\n\n    let tableRows = [];\n    for (let i = 0; i < data.splits.length; i++) {\n        const item = data.splits[i];\n\n        if(item.league.id && item.league.id === 133){\n            tableRows.push(\n                <tr key={`tr_${item.season}_${i}`}>\n                    <td className=\"--small\">{item.season}</td>\n                    <td>{item.team.name}</td>\n                    <td>{item.stat.games}</td>\n                    <td>{item.stat.goals}</td>\n                    <td>{item.stat.assists}</td>\n                    <td>{item.stat.points}</td>\n                </tr>\n                )\n        }\n    }\n\n    const title = data.type.displayName.includes('Playoff') ? 'Playoff' : 'Regular seasons';\n    const table = \n        <table key={data.type.displayName}>\n            <caption>{title}</caption>\n            <thead>\n                <tr>\n                    <th>Year</th>\n                    <th>Team</th>\n                    <th>Games</th>\n                    <th>Goals</th>\n                    <th>Assists</th>\n                    <th>Points</th>\n                </tr>\n            </thead>\n            <tbody>\n                {tableRows}\n            </tbody>\n        </table>\n\n    return table\n\n}\n\n","import React from 'react';\nimport { Captain } from './getPlayerInfo';\nimport { PlayerStats } from './getPlayerStats';\n\nexport class PlayerDetail extends React.Component {\n\n    render() {\n        const { playerData } = this.props;\n        return (\n        <div className=\"modal\">\n            <button type=\"button\" className=\"modal__close\" onClick={this.props.selectPlayer.bind(null, null)}> X </button>\n            <div className=\"modal__container\">\n                <div className=\"player-detail\">\n                    <img src={`https://nhl.bamcontent.com/images/headshots/current/168x168/${playerData.person.id}@3x.jpg`} alt={playerData.person.fullName} />\n                    <div className=\"info\">\n                        <span className=\"no\">{playerData.jerseyNumber}</span>\n                        <span className=\"name\">{playerData.person.fullName}</span>\n                        <span className=\"pos\">{playerData.position.type}</span>\n                        <Captain playerId={playerData.person.id} />\n                    </div>\n                    {\n                        playerData\n                        ?\n                        <PlayerStats playerData={playerData}/>\n                        :\n                        null\n                    }\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n","import React from 'react';\n\nimport { GetRoster } from '../data/getRoster';\nimport { SortList } from '../data/sortList';\nimport { PlayerDetail } from '../data/getPlayerDetail';\n\nexport class Team extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            teams: [],\n            teamId: null,\n            teamSort: null,\n            playerData: null,\n        };\n    }\n\n    selectPlayer = (event, playerData) =>{\n        if(playerData) {\n            document.body.classList.add('modal-open');\n        } else {\n            document.body.classList.remove('modal-open');\n        }\n        this.setState({\n            playerData: playerData\n        });\n    }\n\n    updateSortOrder = (event, sortType) =>{\n        this.setState({\n            teamSort: sortType\n        });\n    }\n\n    render() {\n        const { teamId } = this.props;\n        const { playerData } = this.state;\n        console.log('playerId :', playerData);\n        return (\n            <div>\n                <SortList updateSortType={this.updateSortOrder.bind(null, 1)} teamSort={this.state.teamSort} teamId={teamId} />\n                <GetRoster teamId={teamId} teamSort={this.state.teamSort} selectPlayer={this.selectPlayer.bind(null, 1)} />\n                {\n                    playerData\n                    ? \n                    (\n                        <PlayerDetail playerData={playerData} selectPlayer={this.selectPlayer.bind(null, 1)} />\n                    )\n                    :\n                    null\n                }\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nimport { GetTeams } from '../data/getTeams';\nimport { Team } from './Team';\n\nexport class DefaultContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            teams: [],\n            teamId: null,\n            teamSort: null,\n        };\n    }\n\n    selectTeam = (event, ID) =>{\n        this.setState({\n            teamId: ID\n        });\n    }\n\n    updateSortOrder = (event, sortType) =>{\n        this.setState({\n            teamSort: sortType\n        });\n    }\n\n    render() {\n        const { teamId, teamSort } = this.state;\n        return (\n        <div>\n            <section className=\"page-header\">\n                <img src=\"https://www-league.nhlstatic.com/images/logos/league-dark/133.svg\" alt=\"NHL\"/>\n                <h1>NHL 2019/20</h1>\n            </section>\n            <GetTeams updateTeamID={this.selectTeam.bind(null, 1)} temaId={teamId} />\n            <Team teamId={teamId} teamSort={teamSort}  />\n        </div>\n        );\n    }\n}\n","import React from 'react';\nimport { DefaultContainer } from './DefaultContainer';\n\n\nexport class MainPage extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"grid\">\n                    <div className=\"col-12\">\n                        <DefaultContainer />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './styles/core.scss'\nimport { MainPage } from './components/MainPage';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainPage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}